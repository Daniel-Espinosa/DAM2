/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.cafeconpalito.psp_tema5_tarea3_trabajofinal;

import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.HashTool;
import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.KeyPairManagerRSA;
import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.Logs;
import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.PasswordValidator;
import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.RSAEncryption;
import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.SecretKeyManagerAES;
import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.AESEncription;
import com.cafeconpalito.psp_tema5_tarea3_trabajofinal.Metodos.DigitalSigningTool;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.logging.Level;
import javax.crypto.SecretKey;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author damt207
 */
public class viewApp extends javax.swing.JFrame {

    private static KeyPair RSAgeneratorKeyPair;
    private static SecretKey claveAES;
    private static KeyPair clavesDSA;

    /**
     * Creates new form Cifrado
     */
    public viewApp() {
        initComponents();

        Logs.openLogs();

        //CARGA LOS DISTINTOS ALGORITMOS DE CIFRADO PARA EL HASH
        for (String algorithm : HashTool.getAlgorithms()) {
            jComboBoxHASH.addItem(algorithm);
        }

        //PERMITE EL WRAP PARA LOS TEXT AREA Y QUE SOLO HAGAN SCROLL PARA ABAJO
        jTextAreaRSAgeneratorPrivateKey.setLineWrap(true);
        jTextAreaRSAgeneratorPrivateKey.setWrapStyleWord(true);

        jTextAreaRSAgeneratorPublicKey.setLineWrap(true);
        jTextAreaRSAgeneratorPublicKey.setWrapStyleWord(true);

        jTextAreaHASHResponse.setLineWrap(true);
        jTextAreaHASHResponse.setWrapStyleWord(true);

        jTextHASHAreaString.setLineWrap(true);
        jTextHASHAreaString.setWrapStyleWord(true);

        jTextAreaDSAprivateKey.setLineWrap(true);
        jTextAreaDSAprivateKey.setWrapStyleWord(true);

        jTextAreaDSApublicKey.setLineWrap(true);
        jTextAreaDSApublicKey.setWrapStyleWord(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void jPanelErrorMensaje(String msg) {

        JOptionPane jop = new JOptionPane(msg, JOptionPane.ERROR_MESSAGE);
        JDialog jd = jop.createDialog("ERROR");
        jd.setLocationRelativeTo(null);
        jd.setVisible(true);

    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabelHASHString = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextHASHAreaString = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxHASH = new javax.swing.JComboBox<>();
        jButtonHASHCifrarTexto = new javax.swing.JButton();
        jLabelHASHFilePath = new javax.swing.JLabel();
        jButtonHASHSelectFile = new javax.swing.JButton();
        jButtonHASHCifrarArchivo = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButtonHASHLimpiar = new javax.swing.JButton();
        jTextFieldHASHRutaArchivo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaHASHResponse = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabelRSAgeneratorKeySize = new javax.swing.JLabel();
        jComboBoxRSAgeneratorKeySize = new javax.swing.JComboBox<>();
        jButtonRSAgeneratorLimpiar = new javax.swing.JButton();
        jLabelRSAgeneratorKeySeed = new javax.swing.JLabel();
        jTextFieldRSAgeneratorKeySeed = new javax.swing.JTextField();
        jButtonRSAgeneratorGenerarPair = new javax.swing.JButton();
        jLabelRSAprivateKey = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaRSAgeneratorPrivateKey = new javax.swing.JTextArea();
        jLabelRSApubliKey = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaRSAgeneratorPublicKey = new javax.swing.JTextArea();
        jButtonRSAgeneratorSaveKeys = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButtonRSAcifradoLimpiar = new javax.swing.JButton();
        jLabelRSAcifradoPathKey = new javax.swing.JLabel();
        jLabelRSAcifradoPathCifrado = new javax.swing.JLabel();
        jTextFieldRSAcifradoPathKey = new javax.swing.JTextField();
        jTextFieldRSAcifradoPathCifrado = new javax.swing.JTextField();
        jButtonRSAcifradoSelectKeyPath = new javax.swing.JButton();
        jButtonRSAcifradoOpenCifrado = new javax.swing.JButton();
        jButtonRSAcifradoCifrar = new javax.swing.JButton();
        jButtonRSAcifradoDescifra = new javax.swing.JButton();
        jComboBoxRSAcifradoKeyTipe = new javax.swing.JComboBox<>();
        jLabelRSAcifradoKeyTipe = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jComboBoxAESgeneratorKeySize = new javax.swing.JComboBox<>();
        jLabelAESgeneratorKeySize = new javax.swing.JLabel();
        jTextFieldAESgeneratorPass = new javax.swing.JTextField();
        jLabelAESgeneratorPass = new javax.swing.JLabel();
        jLabelAESgeneratorKey = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaAESgeneratorKey = new javax.swing.JTextArea();
        jButtonAESgeneratorLimpiar = new javax.swing.JButton();
        jButtonAESgeneratorGenerar = new javax.swing.JButton();
        jButtonAESgeneratorSaveKey = new javax.swing.JButton();
        jLabelAESgeneratorPathKey = new javax.swing.JLabel();
        jTextFieldAESgeneratorPathKey = new javax.swing.JTextField();
        jButtonAESgeneratorSelectKeyPath = new javax.swing.JButton();
        jButtonAESgeneratorCifrar = new javax.swing.JButton();
        jButtonAESgeneratorDescifrar = new javax.swing.JButton();
        jLabelAESgeneratorPathCifrado = new javax.swing.JLabel();
        jTextFieldAESgeneratorPathCifrado = new javax.swing.JTextField();
        jButtonAESgeneratorOpenCifrado = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButtonDSAGenerarPair = new javax.swing.JButton();
        jLabelRSAgeneratorKeySize1 = new javax.swing.JLabel();
        jButtonDSAsaveKeys = new javax.swing.JButton();
        jLabelDSAprivateKey = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaDSAprivateKey = new javax.swing.JTextArea();
        jLabelDSApublicKey = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextAreaDSApublicKey = new javax.swing.JTextArea();
        jButtonAESgeneratorLimpiar1 = new javax.swing.JButton();
        jLabelDSAprivateKeyPath = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextAreaDSAprivateKeyPath = new javax.swing.JTextArea();
        jButtonDSAselectPrivatetKeyPath = new javax.swing.JButton();
        jButtonDSAcifrarPrivateKey = new javax.swing.JButton();
        jLabelDSApublicKeyPath = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextAreaDSApublicKeyPath = new javax.swing.JTextArea();
        jButtonDSAselectPublictKeyPath = new javax.swing.JButton();
        jButtonDSAcomprobarFirma = new javax.swing.JButton();
        jLabelDSAcifradoPath = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextAreaDSAcifradoPath = new javax.swing.JTextArea();
        jButtonDSAselectPublictKeyPath1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabelLogs = new javax.swing.JLabel();
        jButtonLogs = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelCafeConPalito = new javax.swing.JLabel();
        jButtonSalir = new javax.swing.JButton();

        jScrollPane5.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cifrado Tema 5 Tarea Final");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabelHASHString.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelHASHString.setText("Introduce un texto para cifrar");

        jTextHASHAreaString.setColumns(20);
        jTextHASHAreaString.setRows(5);
        jScrollPane1.setViewportView(jTextHASHAreaString);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Selecciona metodo de Cifrado");

        jButtonHASHCifrarTexto.setText("Cifrar");
        jButtonHASHCifrarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHASHCifrarTextoActionPerformed(evt);
            }
        });

        jLabelHASHFilePath.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelHASHFilePath.setText("Selecciona un archivo para cifrar");

        jButtonHASHSelectFile.setText("Seleccionar");
        jButtonHASHSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHASHSelectFileActionPerformed(evt);
            }
        });

        jButtonHASHCifrarArchivo.setText("Cifrar");
        jButtonHASHCifrarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHASHCifrarArchivoActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Funcion resumen HASH");

        jButtonHASHLimpiar.setText("Limpiar");
        jButtonHASHLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHASHLimpiarActionPerformed(evt);
            }
        });

        jTextFieldHASHRutaArchivo.setFocusable(false);

        jTextAreaHASHResponse.setColumns(20);
        jTextAreaHASHResponse.setRows(5);
        jScrollPane2.setViewportView(jTextAreaHASHResponse);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonHASHLimpiar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                            .addComponent(jComboBoxHASH, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldHASHRutaArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelHASHFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelHASHString, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                            .addComponent(jButtonHASHCifrarTexto)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonHASHCifrarArchivo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonHASHSelectFile))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(491, 491, 491)))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHASHString)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonHASHCifrarTexto)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBoxHASH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(117, 117, 117)))
                .addComponent(jLabelHASHFilePath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHASHRutaArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonHASHCifrarArchivo)
                    .addComponent(jButtonHASHSelectFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonHASHLimpiar)
                .addGap(17, 17, 17))
        );

        jTabbedPane1.addTab("HASH Cifrado ", jPanel1);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabelRSAgeneratorKeySize.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSAgeneratorKeySize.setText("Selecciona tamaño clave");

        jComboBoxRSAgeneratorKeySize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "512", "1024", "2048", "3072", "4096" }));

        jButtonRSAgeneratorLimpiar.setText("Limpiar");
        jButtonRSAgeneratorLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAgeneratorLimpiarActionPerformed(evt);
            }
        });

        jLabelRSAgeneratorKeySeed.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSAgeneratorKeySeed.setText("Introduce una semilla");

        jButtonRSAgeneratorGenerarPair.setText("Generar");
        jButtonRSAgeneratorGenerarPair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAgeneratorGenerarPairActionPerformed(evt);
            }
        });

        jLabelRSAprivateKey.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSAprivateKey.setText("Clave Privada");

        jTextAreaRSAgeneratorPrivateKey.setColumns(20);
        jTextAreaRSAgeneratorPrivateKey.setRows(5);
        jScrollPane3.setViewportView(jTextAreaRSAgeneratorPrivateKey);

        jLabelRSApubliKey.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSApubliKey.setText("Clave Publica");

        jTextAreaRSAgeneratorPublicKey.setColumns(20);
        jTextAreaRSAgeneratorPublicKey.setRows(5);
        jScrollPane4.setViewportView(jTextAreaRSAgeneratorPublicKey);

        jButtonRSAgeneratorSaveKeys.setText("Guardar");
        jButtonRSAgeneratorSaveKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAgeneratorSaveKeysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabelRSApubliKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jButtonRSAgeneratorLimpiar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButtonRSAgeneratorGenerarPair)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButtonRSAgeneratorSaveKeys))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelRSAgeneratorKeySize, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                .addComponent(jComboBoxRSAgeneratorKeySize, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelRSAgeneratorKeySeed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldRSAgeneratorKeySeed))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelRSAprivateKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabelRSAgeneratorKeySize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxRSAgeneratorKeySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelRSAgeneratorKeySeed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldRSAgeneratorKeySeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(248, 248, 248))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabelRSAprivateKey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelRSApubliKey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRSAgeneratorLimpiar)
                    .addComponent(jButtonRSAgeneratorGenerarPair)
                    .addComponent(jButtonRSAgeneratorSaveKeys))
                .addGap(18, 18, 18))
        );

        jTabbedPane1.addTab("RSA Key Generator", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jButtonRSAcifradoLimpiar.setText("Limpiar");
        jButtonRSAcifradoLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAcifradoLimpiarActionPerformed(evt);
            }
        });

        jLabelRSAcifradoPathKey.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSAcifradoPathKey.setText("Ruta de la clave");

        jLabelRSAcifradoPathCifrado.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSAcifradoPathCifrado.setText("Ruta archivo encriptado / descifrado");

        jTextFieldRSAcifradoPathKey.setFocusable(false);

        jTextFieldRSAcifradoPathCifrado.setFocusable(false);

        jButtonRSAcifradoSelectKeyPath.setText("Seleccionar");
        jButtonRSAcifradoSelectKeyPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAcifradoSelectKeyPathActionPerformed(evt);
            }
        });

        jButtonRSAcifradoOpenCifrado.setText("Abrir");
        jButtonRSAcifradoOpenCifrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAcifradoOpenCifradoActionPerformed(evt);
            }
        });

        jButtonRSAcifradoCifrar.setText("Cifrar");
        jButtonRSAcifradoCifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAcifradoCifrarActionPerformed(evt);
            }
        });

        jButtonRSAcifradoDescifra.setText("Descifrar");
        jButtonRSAcifradoDescifra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRSAcifradoDescifraActionPerformed(evt);
            }
        });

        jComboBoxRSAcifradoKeyTipe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Privada", "Publica" }));

        jLabelRSAcifradoKeyTipe.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSAcifradoKeyTipe.setText("Tipo clave");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelRSAcifradoKeyTipe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxRSAcifradoKeyTipe, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonRSAcifradoOpenCifrado)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jButtonRSAcifradoSelectKeyPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonRSAcifradoCifrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonRSAcifradoDescifra))
                            .addComponent(jLabelRSAcifradoPathKey, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                            .addComponent(jLabelRSAcifradoPathCifrado, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                            .addComponent(jTextFieldRSAcifradoPathKey)
                            .addComponent(jTextFieldRSAcifradoPathCifrado)))
                    .addComponent(jButtonRSAcifradoLimpiar))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabelRSAcifradoPathKey)
                        .addGap(3, 3, 3)
                        .addComponent(jTextFieldRSAcifradoPathKey, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabelRSAcifradoKeyTipe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxRSAcifradoKeyTipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRSAcifradoSelectKeyPath)
                    .addComponent(jButtonRSAcifradoCifrar)
                    .addComponent(jButtonRSAcifradoDescifra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelRSAcifradoPathCifrado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldRSAcifradoPathCifrado, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRSAcifradoOpenCifrado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                .addComponent(jButtonRSAcifradoLimpiar)
                .addGap(17, 17, 17))
        );

        jTabbedPane1.addTab("RSA Cifrado", jPanel6);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jComboBoxAESgeneratorKeySize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128", "192", "256" }));

        jLabelAESgeneratorKeySize.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelAESgeneratorKeySize.setText("Selecciona tamaño clave");

        jLabelAESgeneratorPass.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelAESgeneratorPass.setText("Introduce una contraseña");

        jLabelAESgeneratorKey.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelAESgeneratorKey.setText("AES Key");

        jTextAreaAESgeneratorKey.setColumns(20);
        jTextAreaAESgeneratorKey.setRows(1);
        jTextAreaAESgeneratorKey.setFocusable(false);
        jTextAreaAESgeneratorKey.setPreferredSize(new java.awt.Dimension(232, 22));
        jScrollPane6.setViewportView(jTextAreaAESgeneratorKey);

        jButtonAESgeneratorLimpiar.setText("Limpiar");
        jButtonAESgeneratorLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorLimpiarActionPerformed(evt);
            }
        });

        jButtonAESgeneratorGenerar.setText("Generar");
        jButtonAESgeneratorGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorGenerarActionPerformed(evt);
            }
        });

        jButtonAESgeneratorSaveKey.setText("Guardar");
        jButtonAESgeneratorSaveKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorSaveKeyActionPerformed(evt);
            }
        });

        jLabelAESgeneratorPathKey.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelAESgeneratorPathKey.setText("Ruta de la AES Key, Para cifrar o descifrar archivos .png");

        jTextFieldAESgeneratorPathKey.setFocusable(false);

        jButtonAESgeneratorSelectKeyPath.setText("Seleccionar");
        jButtonAESgeneratorSelectKeyPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorSelectKeyPathActionPerformed(evt);
            }
        });

        jButtonAESgeneratorCifrar.setText("Cifrar");
        jButtonAESgeneratorCifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorCifrarActionPerformed(evt);
            }
        });

        jButtonAESgeneratorDescifrar.setText("Descifrar");
        jButtonAESgeneratorDescifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorDescifrarActionPerformed(evt);
            }
        });

        jLabelAESgeneratorPathCifrado.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelAESgeneratorPathCifrado.setText("Ruta archivo encriptado / descifrado");

        jTextFieldAESgeneratorPathCifrado.setFocusable(false);

        jButtonAESgeneratorOpenCifrado.setText("Abrir");
        jButtonAESgeneratorOpenCifrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorOpenCifradoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAESgeneratorLimpiar)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelAESgeneratorKeySize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxAESgeneratorKeySize, 0, 146, Short.MAX_VALUE)
                            .addComponent(jTextFieldAESgeneratorPass)
                            .addComponent(jLabelAESgeneratorPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelAESgeneratorKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonAESgeneratorGenerar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAESgeneratorSaveKey))
                            .addComponent(jButtonAESgeneratorOpenCifrado)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButtonAESgeneratorSelectKeyPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAESgeneratorCifrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAESgeneratorDescifrar))
                            .addComponent(jLabelAESgeneratorPathKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelAESgeneratorPathCifrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldAESgeneratorPathKey)
                            .addComponent(jTextFieldAESgeneratorPathCifrado, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelAESgeneratorKeySize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxAESgeneratorKeySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelAESgeneratorPass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAESgeneratorPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAESgeneratorLimpiar)
                        .addGap(17, 17, 17))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelAESgeneratorKey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAESgeneratorSaveKey)
                            .addComponent(jButtonAESgeneratorGenerar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelAESgeneratorPathKey)
                        .addGap(3, 3, 3)
                        .addComponent(jTextFieldAESgeneratorPathKey, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAESgeneratorSelectKeyPath)
                            .addComponent(jButtonAESgeneratorCifrar)
                            .addComponent(jButtonAESgeneratorDescifrar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelAESgeneratorPathCifrado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAESgeneratorPathCifrado, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAESgeneratorOpenCifrado, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(160, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("AES Key", jPanel2);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jButtonDSAGenerarPair.setText("Generar");
        jButtonDSAGenerarPair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDSAGenerarPairActionPerformed(evt);
            }
        });

        jLabelRSAgeneratorKeySize1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelRSAgeneratorKeySize1.setText("Generar firma");

        jButtonDSAsaveKeys.setText("Guardar");
        jButtonDSAsaveKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDSAsaveKeysActionPerformed(evt);
            }
        });

        jLabelDSAprivateKey.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelDSAprivateKey.setText("Clave Privada");

        jTextAreaDSAprivateKey.setColumns(20);
        jTextAreaDSAprivateKey.setRows(1);
        jScrollPane7.setViewportView(jTextAreaDSAprivateKey);

        jLabelDSApublicKey.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelDSApublicKey.setText("Clave Publica");

        jTextAreaDSApublicKey.setColumns(20);
        jTextAreaDSApublicKey.setRows(1);
        jScrollPane8.setViewportView(jTextAreaDSApublicKey);

        jButtonAESgeneratorLimpiar1.setText("Limpiar");
        jButtonAESgeneratorLimpiar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAESgeneratorLimpiar1ActionPerformed(evt);
            }
        });

        jLabelDSAprivateKeyPath.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelDSAprivateKeyPath.setText("Cargar Clave Privada");

        jTextAreaDSAprivateKeyPath.setColumns(20);
        jTextAreaDSAprivateKeyPath.setRows(1);
        jScrollPane9.setViewportView(jTextAreaDSAprivateKeyPath);

        jButtonDSAselectPrivatetKeyPath.setText("Seleccionar");
        jButtonDSAselectPrivatetKeyPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDSAselectPrivatetKeyPathActionPerformed(evt);
            }
        });

        jButtonDSAcifrarPrivateKey.setText("Firmar");
        jButtonDSAcifrarPrivateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDSAcifrarPrivateKeyActionPerformed(evt);
            }
        });

        jLabelDSApublicKeyPath.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelDSApublicKeyPath.setText("Cargar Clave Publica");

        jTextAreaDSApublicKeyPath.setColumns(20);
        jTextAreaDSApublicKeyPath.setRows(1);
        jScrollPane10.setViewportView(jTextAreaDSApublicKeyPath);

        jButtonDSAselectPublictKeyPath.setText("Seleccionar");
        jButtonDSAselectPublictKeyPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDSAselectPublictKeyPathActionPerformed(evt);
            }
        });

        jButtonDSAcomprobarFirma.setText("Comprobar");
        jButtonDSAcomprobarFirma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDSAcomprobarFirmaActionPerformed(evt);
            }
        });

        jLabelDSAcifradoPath.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelDSAcifradoPath.setText("Fichero Cifrado / Descifrado");

        jTextAreaDSAcifradoPath.setColumns(20);
        jTextAreaDSAcifradoPath.setRows(1);
        jScrollPane11.setViewportView(jTextAreaDSAcifradoPath);

        jButtonDSAselectPublictKeyPath1.setText("Abrir");
        jButtonDSAselectPublictKeyPath1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDSAselectPublictKeyPath1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRSAgeneratorKeySize1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButtonDSAGenerarPair)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDSAsaveKeys))
                    .addComponent(jButtonAESgeneratorLimpiar1))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButtonDSAselectPublictKeyPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDSAcomprobarFirma))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonDSAselectPublictKeyPath1)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelDSApublicKeyPath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jButtonDSAselectPrivatetKeyPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonDSAcifrarPrivateKey)))
                        .addComponent(jLabelDSAprivateKeyPath, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelDSApublicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelDSAprivateKey, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelDSAcifradoPath, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane7)
                        .addComponent(jScrollPane8)
                        .addComponent(jScrollPane9)
                        .addComponent(jScrollPane10)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRSAgeneratorKeySize1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDSAprivateKey, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonDSAGenerarPair)
                        .addComponent(jButtonDSAsaveKeys))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDSApublicKey)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDSAprivateKeyPath, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDSAselectPrivatetKeyPath)
                    .addComponent(jButtonDSAcifrarPrivateKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDSAcifradoPath, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDSAselectPublictKeyPath1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabelDSApublicKeyPath, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAESgeneratorLimpiar1))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDSAselectPublictKeyPath)
                            .addComponent(jButtonDSAcomprobarFirma))))
                .addGap(18, 18, 18))
        );

        jTabbedPane1.addTab("Digital Singning", jPanel7);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabelLogs.setText("<html><p>En los logs estan contenida toda la informacion de las interacciones y errores generados por la aplicacion.</p></html>");

        jButtonLogs.setText("Abrir Logs");
        jButtonLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogsActionPerformed(evt);
            }
        });

        jLabel1.setText("<html>          <p>HASH Cifrado:</p>      <p> Permite cifrar texto plano o un archivo en función del Algoritmo de encriptación. Devuelve el resultado del cifrado en Hexadecimal</p>          <p></p>          <p>RSA Key Generator:</p>          <p> Genera un par de claves pública y privada, utilizando el Algoritmo RSA, pudiendo seleccionar el tamaño de la clave y la semilla. guarda el par de claves en formato .rkey</p>          <p></p>          <p>RSA Key Cifrado:</p>      <p> Utilizando claves RSA pública o privada permite cifrar o descifrar un archivo .txt </p>          <p></p>          <p>AES Key:</p>          <p> Permite generar una clave AES seleccionando un tamaño y validando la contraseña, pudiendo guardarla en formato .akey</p>      <p> Se pueden cifrar o descifrar archivos .png utilizando esta clave</p>     <p></p>          <p>Digital Signing:</p>          <p> Permite generar una clave DSA para firmar ficheros pudiendo guardarla las claves publica y privada con formato .pudsa y prdsa</p>      <p> Permite la encriptacion de un fichero .txt y comrpobar si la firma es correcta</p>  </html> ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                        .addGap(34, 34, 34))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonLogs))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabelLogs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLogs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Help", jPanel4);

        jLabelCafeConPalito.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelCafeConPalito.setText("<html><p>Made by Cafe Con Palito®</p><p>with love ♡</p></html> ");

        jButtonSalir.setText("Cerrar");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSalir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelCafeConPalito, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addComponent(jTabbedPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButtonSalir)
                    .addComponent(jLabelCafeConPalito, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo para seleccionar un archivo, despliega un file chooser.
     *
     * @param titulo titulo del file chooser.
     * @param isFile True si lo que se quiere es un archivo, false para un.
     * @param fileTipe 1 = .rsa | 2 = .txt | 3 = .rkey | 4 = .akey | 5 = .aes |
     * 6 = .png | 7 = .pudsa | 8 = .prdsa | 9 = .sdsa
     * @return devuelve la ruta del archivo o null.
     */
    private String selectFile(String titulo, boolean isFile, int fileTipe) {

        //Creamos el objeto JFileChooser
        JFileChooser fc = new JFileChooser();

        //Indicamos lo que podemos seleccionar
        if (isFile) {
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        } else {
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fileTipe = 0;
        }

        //Titulo del File Chooser
        fc.setDialogTitle(titulo);

        //Creamos el filtro de archivos a recibir puede ser un String simple para 1 o un array de Strings para multiples tipos.    
        //SOLO UN TIPO
        //SI EL ARCHIVO A GUARDAR ES .DAT añadimos el filtro
        FileNameExtensionFilter filtro;
        switch (fileTipe) {
            case 1:
                filtro = new FileNameExtensionFilter("*.rsa", "rsa");
                fc.setFileFilter(filtro);
                break;
            case 2:
                filtro = new FileNameExtensionFilter("*.txt", "txt");
                fc.setFileFilter(filtro);
                break;
            case 3:
                filtro = new FileNameExtensionFilter("*.rkey", "rkey");
                fc.setFileFilter(filtro);
                break;
            case 4:
                filtro = new FileNameExtensionFilter("*.akey", "akey");
                fc.setFileFilter(filtro);
                break;
            case 5:
                filtro = new FileNameExtensionFilter("*.aes", "aes");
                fc.setFileFilter(filtro);
                break;
            case 6:
                filtro = new FileNameExtensionFilter("*.png", "png");
                fc.setFileFilter(filtro);
                break;
            case 7:
                filtro = new FileNameExtensionFilter("*.pudsa", "pudsa");
                fc.setFileFilter(filtro);
                break;
            case 8:
                filtro = new FileNameExtensionFilter("*.prdsa", "prdsa");
                fc.setFileFilter(filtro);
                break;
            case 9:
                filtro = new FileNameExtensionFilter("*.sdsa", "sdsa");
                fc.setFileFilter(filtro);
                break;
            default:
        }

        //MULTIPLES TIPOS
        /*
        String[] tiposImagen = {"png","jpg","jpeg"};
        String[] descripcion = {"*.png","*.jpg","*.jpeg"};

        //setea para todas las extenciones de imagen que tengo
        fc.setFileFilter(new FileNameExtensionFilter("Imagenes", tiposImagen));
        
        //añade uno por cada tipo de imagen
        for (int i = 0; i < descripcion.length; i++) {
            
            fc.addChoosableFileFilter(new FileNameExtensionFilter(descripcion[i], tiposImagen[i]));
        }
         */
        //Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fc.showOpenDialog(this);

        //Si el usuario, pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //Seleccionamos el fichero y guardamos su informacion en un tipo File
            //File fichero = fc.getSelectedFile().;
            //SACA LA EXTENCION DE LA IMAGEN
            //extencionImagen = fichero.toString().substring(fichero.toString().lastIndexOf("."));
            //Guarda en el Path la ruta Original.
            //origenPath = FileSystems.getDefault().getPath(fichero.getAbsolutePath());
            //Ecribe la ruta del fichero seleccionado en el campo de texto
            //System.out.println(Files.getFileExtension(fc.getSelectedFile().getAbsolutePath()));
            return fc.getSelectedFile().getAbsolutePath();

        }

        return null;

    }

    /**
     * limpia los errores de HASH cifrado.
     */
    private void clearErrorsHASH() {
        jLabelHASHString.setForeground(Color.black);
        jLabelHASHFilePath.setForeground(Color.black);
    }

    /**
     * Limpia los campos de HASH cifrado.
     */
    private void clearFieldsHASH() {
        clearErrorsHASH();
        jTextFieldHASHRutaArchivo.setText("");
        jTextHASHAreaString.setText("");
        jTextAreaHASHResponse.setText("");
    }

    /**
     * Limpia los errores de la vista RSA generator.
     */
    private void clearErrorsRSAgenerator() {
        jLabelRSAprivateKey.setForeground(Color.black);
        jLabelRSApubliKey.setForeground(Color.black);
    }

    /**
     * Limpia los campos de la vista RSA generator.
     */
    private void clearFieldsRSAgenerator() {
        clearErrorsRSAgenerator();
        jTextFieldRSAgeneratorKeySeed.setText("");
        jTextAreaRSAgeneratorPrivateKey.setText("");
        jTextAreaRSAgeneratorPublicKey.setText("");
    }

    /**
     * limpia los errores de las vista RSA cifrado.
     */
    private void clearErrorsRSAcifrado() {
        jLabelRSAcifradoPathKey.setForeground(Color.black);
        jLabelRSAcifradoPathCifrado.setForeground(Color.black);
    }

    /**
     * limpia los campos de las vista RSA cifrado.
     */
    private void clearFieldsRSAcifrado() {
        clearErrorsRSAcifrado();
        jTextFieldRSAcifradoPathKey.setText("");
        jTextFieldRSAcifradoPathCifrado.setText("");
    }

    /**
     * limpia los errores de la vista AES generator.
     */
    private void clearErrorsAESgenerator() {
        jLabelAESgeneratorKey.setForeground(Color.black);
        jLabelAESgeneratorKeySize.setForeground(Color.black);
        jLabelAESgeneratorPass.setForeground(Color.black);
        jLabelAESgeneratorPathCifrado.setForeground(Color.black);
        jLabelAESgeneratorPathKey.setForeground(Color.black);

    }

    /**
     * limpia los campos de la vista AES generator.
     */
    private void clearFieldsAESgenerator() {
        clearErrorsAESgenerator();
        jTextFieldAESgeneratorPass.setText("");
        jTextFieldAESgeneratorPathCifrado.setText("");
        jTextFieldAESgeneratorPathKey.setText("");
        jTextAreaAESgeneratorKey.setText("");
    }

    private void clearErrorsDSA() {

        jLabelDSAprivateKey.setForeground(Color.black);
        jLabelDSAprivateKeyPath.setForeground(Color.black);
        jLabelDSApublicKey.setForeground(Color.black);
        jLabelDSApublicKeyPath.setForeground(Color.black);
        jLabelDSAcifradoPath.setForeground(Color.black);

    }

    private void clearFieldsDSA() {

        clearErrorsDSA();
        jTextAreaDSAcifradoPath.setText("");
        jTextAreaDSAprivateKey.setText("");
        jTextAreaDSAprivateKeyPath.setText("");
        jTextAreaDSApublicKey.setText("");
        jTextAreaDSApublicKeyPath.setText("");

    }


    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:

        Logs.closeLogs();
        System.exit(0);

    }//GEN-LAST:event_jButtonSalirActionPerformed

    /**
     * Abre la ruta de los logs
     *
     * @param evt
     */
    private void jButtonLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogsActionPerformed

        try {
            String path = new File(".").getCanonicalPath();
            Desktop.getDesktop().open(new File(path + "/logs"));
            Logs.LOGGER_USER.log(Level.INFO, "El usuario accede a la carpeta de Logs");
        } catch (IOException ex) {
            Logs.LOGGER_ERRORS.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonLogsActionPerformed

    /**
     * Accion del Boton Guardar AES Generator. Guarda una clave AES en un
     * fichero.
     *
     * @param evt
     */
    private void jButtonAESgeneratorSaveKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorSaveKeyActionPerformed

        clearErrorsAESgenerator();
        if (jTextAreaAESgeneratorKey.getText().isBlank()) {
            jLabelAESgeneratorKey.setForeground(Color.red);
        } else {
            String directoryPath = selectFile("Selecciona una carpeta para guardar AES key", false, 0);
            if (directoryPath == null) {
                jPanelErrorMensaje("Seleecciona una ruta valida");
            } else {
                SecretKeyManagerAES.saveKeyAES(directoryPath, claveAES);
            }
        }
    }//GEN-LAST:event_jButtonAESgeneratorSaveKeyActionPerformed

    /**
     * Accion Generar AES KEY de la vista AES Generator
     *
     * @param evt
     */
    private void jButtonAESgeneratorGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorGenerarActionPerformed

        clearErrorsAESgenerator();
        if (!passIsOk()) {
            jLabelAESgeneratorPass.setForeground(Color.red);
        } else {
            claveAES = SecretKeyManagerAES.generateKeyAES(jTextFieldAESgeneratorPass.getText(), Integer.parseInt(jComboBoxAESgeneratorKeySize.getSelectedItem().toString()));
            jTextAreaAESgeneratorKey.setText(HashTool.enHexadecimal(claveAES.getEncoded()));
        }

    }//GEN-LAST:event_jButtonAESgeneratorGenerarActionPerformed

    /**
     * Metodo que comprueba que el campo password es correcto.
     *
     * @return True o False.
     */
    private boolean passIsOk() {

        if (jTextFieldAESgeneratorPass.getText().isBlank()) {
            return false;
        }
        if (!PasswordValidator.validate(jTextFieldAESgeneratorPass.getText())) {
            jPanelErrorMensaje("Introduce una contraseña valida"
                    + "\nTiene contener al menos una Minuscula, una Mayuscula, un Numero, un Simbolo y al menos 8 Caracteres");
            return false;
        }
        return true;
    }

    /**
     * Accion del Boton Limpiar de la vista AES Generator. Limpia los campos y
     * errores de la vista.
     *
     * @param evt
     */
    private void jButtonAESgeneratorLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorLimpiarActionPerformed

        clearFieldsAESgenerator();

    }//GEN-LAST:event_jButtonAESgeneratorLimpiarActionPerformed

    /**
     * Accion del Boton de DESCIFRAR archivo TXT
     *
     * @param evt
     */
    private void jButtonRSAcifradoDescifraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAcifradoDescifraActionPerformed

        clearErrorsRSAcifrado();
        if (!jTextFieldRSAcifradoPathKey.getText().isBlank()) {

            boolean isPrivate = false;

            if (jComboBoxRSAcifradoKeyTipe.getSelectedIndex() == 0) {
                isPrivate = true;
            }

            String absolutePath = selectFile("Selecciona archivo .RSA para desencriptar", true, 1);

            if (absolutePath == null || absolutePath.isBlank()) {
                jPanelErrorMensaje("Seleccina un archivo a desencriptar");
            } else {

                Object key = KeyPairManagerRSA.loadClave(jTextFieldRSAcifradoPathKey.getText(), isPrivate);

                if (key == null) {

                    jPanelErrorMensaje("Error al leer la clave selecciona el tipo correcto");

                } else {
                    // si la encriptacion da error manda un mensaje de error
                    String encripPath = RSAEncryption.descifrar(absolutePath, key, isPrivate);
                    if (encripPath == null || encripPath.isBlank()) {
                        jPanelErrorMensaje("Error al desencriptar comprubeba los datos");
                    } else {
                        jTextFieldRSAcifradoPathCifrado.setText(encripPath);
                    }

                }

            }

        } else {
            jLabelRSAcifradoPathKey.setForeground(Color.red);
        }
    }//GEN-LAST:event_jButtonRSAcifradoDescifraActionPerformed

    /**
     * Accion del boton CIFRAR archivo TXT
     *
     * @param evt
     */
    private void jButtonRSAcifradoCifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAcifradoCifrarActionPerformed

        clearErrorsRSAcifrado();
        if (!jTextFieldRSAcifradoPathKey.getText().isBlank()) {

            boolean isPrivate = false;

            if (jComboBoxRSAcifradoKeyTipe.getSelectedIndex() == 0) {
                isPrivate = true;
            }

            String absolutePath = selectFile("Selecciona archivo TXT para encriptar", true, 2);

            if (absolutePath == null || absolutePath.isBlank()) {
                jPanelErrorMensaje("Seleccina un archivo a encriptar");
            } else {

                Object key = KeyPairManagerRSA.loadClave(jTextFieldRSAcifradoPathKey.getText(), isPrivate);

                if (key == null) {

                    jPanelErrorMensaje("Error al leer la clave selecciona el tipo correcto");

                } else {
                    // si la encriptacion da error manda un mensaje de error
                    String encripPath = RSAEncryption.cifrar(absolutePath, key, isPrivate);
                    if (encripPath == null || encripPath.isBlank()) {
                        jPanelErrorMensaje("Error al encriptar comprubeba los datos");
                    } else {
                        jTextFieldRSAcifradoPathCifrado.setText(encripPath);
                    }
                }
            }

        } else {
            jLabelRSAcifradoPathKey.setForeground(Color.red);
        }

    }//GEN-LAST:event_jButtonRSAcifradoCifrarActionPerformed

    /**
     * Carga la ruta de una Public Key RSA
     *
     * @param evt
     */
    private void jButtonRSAcifradoOpenCifradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAcifradoOpenCifradoActionPerformed

        clearErrorsRSAcifrado();
        if (jTextFieldRSAcifradoPathCifrado.getText().isBlank()) {
            jLabelRSAcifradoPathCifrado.setForeground(Color.red);
        } else {
            try {
                Path p = Paths.get(jTextFieldRSAcifradoPathCifrado.getText());
                Desktop.getDesktop().open(new File(p.getParent().toString()));
            } catch (IOException ex) {
                Logs.LOGGER_ERRORS.log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonRSAcifradoOpenCifradoActionPerformed

    /**
     * Carga la ruta de una Private Key RSA
     *
     * @param evt
     */
    private void jButtonRSAcifradoSelectKeyPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAcifradoSelectKeyPathActionPerformed

        String path = selectFile("Selecciona una Private Key", true, 3);
        if (path != null) {
            jTextFieldRSAcifradoPathKey.setText(path);
        }
    }//GEN-LAST:event_jButtonRSAcifradoSelectKeyPathActionPerformed

    /**
     * limpiar campos RSA cifrado.
     *
     * @param evt
     */
    private void jButtonRSAcifradoLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAcifradoLimpiarActionPerformed
        // TODO add your handling code here:
        clearFieldsRSAcifrado();
    }//GEN-LAST:event_jButtonRSAcifradoLimpiarActionPerformed

    /**
     * Boton Guardar RSA generadas. si no se selecciona una ruta lanzara mensaje
     * de error.
     *
     * @param evt
     */
    private void jButtonRSAgeneratorSaveKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAgeneratorSaveKeysActionPerformed

        clearErrorsRSAgenerator();
        if (jTextAreaRSAgeneratorPrivateKey.getText().isBlank() || jTextAreaRSAgeneratorPublicKey.getText().isBlank()) {
            jLabelRSAprivateKey.setForeground(Color.red);
            jLabelRSApubliKey.setForeground(Color.red);
        } else {
            String path = selectFile("Guardar Claves, Selecciona un directorio", false, 0);
            if (path != null) {
                KeyPairManagerRSA.saveClave(path, RSAgeneratorKeyPair);

            } else {
                Logs.LOGGER_ERRORS.log(Level.SEVERE, "El usuario no selecciono un ruta para guardar el fichero");
                jPanelErrorMensaje("Selecciona una ruta valida");

            }

        }
    }//GEN-LAST:event_jButtonRSAgeneratorSaveKeysActionPerformed

    private void jButtonRSAgeneratorGenerarPairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAgeneratorGenerarPairActionPerformed
        // TODO add your handling code here:

        RSAgeneratorKeyPair = KeyPairManagerRSA.makeKeyPair(jTextFieldRSAgeneratorKeySeed.getText(), Integer.parseInt((String) jComboBoxRSAgeneratorKeySize.getSelectedItem()));

        jTextAreaRSAgeneratorPrivateKey.setText(RSAgeneratorKeyPair.getPrivate().toString());
        jTextAreaRSAgeneratorPublicKey.setText(RSAgeneratorKeyPair.getPublic().toString());
    }//GEN-LAST:event_jButtonRSAgeneratorGenerarPairActionPerformed

    private void jButtonRSAgeneratorLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRSAgeneratorLimpiarActionPerformed
        // TODO add your handling code here:
        clearFieldsRSAgenerator();
    }//GEN-LAST:event_jButtonRSAgeneratorLimpiarActionPerformed

    private void jButtonHASHLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHASHLimpiarActionPerformed
        // TODO add your handling code here:
        clearFieldsHASH();
    }//GEN-LAST:event_jButtonHASHLimpiarActionPerformed

    /**
     * Accion del boton Cifrar File HASH. devuelve el cifrado hash en
     * Hexadecimal
     *
     * @param evt
     */
    private void jButtonHASHCifrarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHASHCifrarArchivoActionPerformed

        clearErrorsHASH();
        if (!jTextFieldHASHRutaArchivo.getText().isBlank()) {
            jTextAreaHASHResponse.setText(HashTool.getFilehash(jComboBoxHASH.getSelectedItem().toString(), new File(jTextFieldHASHRutaArchivo.getText())));
        } else {
            jLabelHASHFilePath.setForeground(Color.red);
        }
    }//GEN-LAST:event_jButtonHASHCifrarArchivoActionPerformed

    /**
     * Accion del boton Seleccionar de HASH cifrado. despliega un file chooser
     * para seleccinar el archivo, y muestra la ruta del archivo.
     *
     * @param evt
     */
    private void jButtonHASHSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHASHSelectFileActionPerformed

        String selected = selectFile("Selecciona un archivo", false, 0);
        if (selected != null) {
            jTextFieldHASHRutaArchivo.setText(selected);
        }
    }//GEN-LAST:event_jButtonHASHSelectFileActionPerformed

    /**
     * Accion del boton Cifrar String HASH. devuelve el cifrado hash en
     * Hexadecimal
     *
     * @param evt
     */
    private void jButtonHASHCifrarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHASHCifrarTextoActionPerformed

        clearErrorsHASH();
        if (!jTextHASHAreaString.getText().isBlank()) {
            jTextAreaHASHResponse.setText(HashTool.getStringHash(jComboBoxHASH.getSelectedItem().toString(), jTextHASHAreaString.getText()));
        } else {
            jLabelHASHString.setForeground(Color.red);
        }
    }//GEN-LAST:event_jButtonHASHCifrarTextoActionPerformed

    /**
     * Accion del Boton Seleccionar de la vista AES Generator Carga la ruta de
     * un fichero .akey para cifrar o descifara un fichero.
     *
     * @param evt
     */
    private void jButtonAESgeneratorSelectKeyPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorSelectKeyPathActionPerformed

        String selected = selectFile("Selecciona una KEY AES", true, 4);
        if (selected != null) {
            jTextFieldAESgeneratorPathKey.setText(selected);
        }

    }//GEN-LAST:event_jButtonAESgeneratorSelectKeyPathActionPerformed

    /**
     * Accion del Boton Cifrar de AES Generator. Comprueba que los parametros
     * son correctos y cifra el archivo.
     *
     * @param evt
     */
    private void jButtonAESgeneratorCifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorCifrarActionPerformed

        clearErrorsAESgenerator();
        if (jTextFieldAESgeneratorPathKey.getText().isBlank()) {
            jLabelAESgeneratorPathKey.setForeground(Color.red);
        } else {

            String absolutePath = selectFile("Selecciona archivo PNG para encriptar", true, 6);
            if (absolutePath.isBlank() || absolutePath == null) {
                jPanelErrorMensaje("Seleccina un archivo a encriptar");
            } else {

                SecretKey claveAES = SecretKeyManagerAES.loadKeyAES(jTextFieldAESgeneratorPathKey.getText());

                //Comprobar la lectura de la clave AES y si es correcta
                if (claveAES == null) { //Si la clave AES da error al leerla
                    jPanelErrorMensaje("Clave AES incorrecta");
                } else { //Si la clave es correcta intenta encriptar

                    // si la encriptacion da error manda un mensaje de error
                    String encripPath = AESEncription.cifrar(absolutePath, claveAES);

                    if (encripPath == null || encripPath.isBlank()) {
                        jPanelErrorMensaje("Error al encriptar comprubeba los datos");
                    } else { // si todo es correcto
                        jTextFieldAESgeneratorPathCifrado.setText(encripPath);
                    }

                }

            }

        }

    }//GEN-LAST:event_jButtonAESgeneratorCifrarActionPerformed

    /**
     * Accion del Boton Descrifrar vista AES Generator. Comprueba que los
     * parametros son correctos y si es asi inenta descifrar el archivo.
     *
     * @param evt
     */
    private void jButtonAESgeneratorDescifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorDescifrarActionPerformed

        clearErrorsAESgenerator();
        if (jTextFieldAESgeneratorPathKey.getText().isBlank()) {
            jPanelErrorMensaje("Selecciona una clave AES");
            jLabelAESgeneratorPathKey.setForeground(Color.red);
        } else {

            String absolutePath = selectFile("Selecciona un archivo .aes", true, 5);

            if (absolutePath == null || absolutePath.isBlank()) {

                jPanelErrorMensaje("Selecciona un archivo a desencriptar.");

            } else {

                SecretKey claveAES = SecretKeyManagerAES.loadKeyAES(jTextFieldAESgeneratorPathKey.getText());

                //Comprobar la lectura de la clave AES y si es correcta
                if (claveAES == null) { //Si la clave AES da error al leerla
                    jPanelErrorMensaje("Clave AES incorrecta");
                } else { //Si la clave es correcta intenta encriptar

                    // si la desencriptacion es error el path sera null;
                    String encripPath = AESEncription.descifrar(absolutePath, claveAES);

                    if (encripPath == null || encripPath.isBlank()) {
                        jPanelErrorMensaje("Error al encriptar comprubeba los datos");
                    } else { // si todo es correcto
                        jTextFieldAESgeneratorPathCifrado.setText(encripPath);
                    }

                }

            }

        }


    }//GEN-LAST:event_jButtonAESgeneratorDescifrarActionPerformed

    /**
     * Accion del boton Abrir de la vista AES Generator. Abre la carpeta de la
     * ruta del archivo.
     *
     * @param evt
     */
    private void jButtonAESgeneratorOpenCifradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorOpenCifradoActionPerformed

        clearErrorsAESgenerator();
        if (jTextFieldAESgeneratorPathCifrado.getText().isBlank()) {
            jLabelAESgeneratorPathCifrado.setForeground(Color.red);
        } else {
            try {
                Path p = Paths.get(jTextFieldAESgeneratorPathCifrado.getText());
                Desktop.getDesktop().open(new File(p.getParent().toString()));
            } catch (IOException ex) {
                Logs.LOGGER_ERRORS.log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonAESgeneratorOpenCifradoActionPerformed

    /**
     * Accion del Boton Generar de la Vista Digital Sigining
     *
     * @param evt
     */
    private void jButtonDSAGenerarPairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDSAGenerarPairActionPerformed
        clearErrorsDSA();
        clavesDSA = DigitalSigningTool.makeKeyPair();
        if (clavesDSA == null) {
            jPanelErrorMensaje("Error al generar las claves DSA");
        } else {
            jTextAreaDSAprivateKey.setText(HashTool.enHexadecimal(clavesDSA.getPrivate().getEncoded()));
            jTextAreaDSApublicKey.setText(HashTool.enHexadecimal(clavesDSA.getPublic().getEncoded()));
        }
    }//GEN-LAST:event_jButtonDSAGenerarPairActionPerformed

    /**
     * Accion del Boton Guardar de la vista Digital Signing. Guarda las claves
     * privadas y publicas en ficheros
     *
     * @param evt
     */
    private void jButtonDSAsaveKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDSAsaveKeysActionPerformed

        clearErrorsDSA();
        if (!jTextAreaDSAprivateKeyPath.getText().isBlank() || !jTextAreaDSApublicKeyPath.getText().isBlank()) {
            jPanelErrorMensaje("Es necesario generar las claves");
        } else {
            String directoryPath = selectFile("Selecciona un directorio para guardar las claves ", false, 0);

            //Comprobar si el directorio es valido
            if (directoryPath == null) {//si no es valido

                jPanelErrorMensaje("Selecciona una ruta para guardar las Claves DSA");
            } else { // si es valido continua

                //Comprueba si el guardado es correcto
                if (!DigitalSigningTool.saveKeys(directoryPath, clavesDSA)) {
                    jPanelErrorMensaje("Error al guardar las claves");
                }

            }

        }
    }//GEN-LAST:event_jButtonDSAsaveKeysActionPerformed

    private void jButtonAESgeneratorLimpiar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAESgeneratorLimpiar1ActionPerformed
        clearFieldsDSA();
    }//GEN-LAST:event_jButtonAESgeneratorLimpiar1ActionPerformed

    /**
     * Accion Boton Seleccionar "PrivateKey" de la vista Digital Signing
     *
     * @param evt
     */
    private void jButtonDSAselectPrivatetKeyPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDSAselectPrivatetKeyPathActionPerformed

        String privateKeyPath = selectFile("Selecciona una clave privada DSA", true, 8);
        if (privateKeyPath == null) {
            jPanelErrorMensaje("Selecciona una clave DSA valida");
            jLabelDSAprivateKeyPath.setForeground(Color.red);
        } else {
            jTextAreaDSAprivateKeyPath.setText(privateKeyPath);
        }

    }//GEN-LAST:event_jButtonDSAselectPrivatetKeyPathActionPerformed

    /**
     * Accion del Boton de Cifrar Digital Signing
     *
     * @param evt
     */
    private void jButtonDSAcifrarPrivateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDSAcifrarPrivateKeyActionPerformed

        if (jTextAreaDSAprivateKeyPath.getText().isBlank()) {
            jPanelErrorMensaje("Selecciona una Private Key");
        } else {
            String p = selectFile("Selecciona un archivo .TXT para firmar", true, 2);
            if (p == null) {
                jPanelErrorMensaje("Selecciona un archivo .TXT");
            } else {
                PrivateKey privateKey = (PrivateKey) DigitalSigningTool.loadClave(jTextAreaDSAprivateKeyPath.getText(), true);
                if (privateKey == null) {
                    jPanelErrorMensaje("Error al leer la Private Key DSA");
                } else {
                    jTextAreaDSAcifradoPath.setText(DigitalSigningTool.firmarFichero(privateKey, p));
                }

            }

        }

    }//GEN-LAST:event_jButtonDSAcifrarPrivateKeyActionPerformed

    /**
     * Accion Boton Seleccionar "PublicKey" de la vista Digital Signing
     *
     * @param evt
     */
    private void jButtonDSAselectPublictKeyPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDSAselectPublictKeyPathActionPerformed

        clearErrorsDSA();
        String publicKeyPath = selectFile("Selecciona una clave privada DSA", true, 7);
        if (publicKeyPath == null) {
            jPanelErrorMensaje("Selecciona una clave DSA valida");
            jLabelDSApublicKeyPath.setForeground(Color.red);
        } else {
            jTextAreaDSApublicKeyPath.setText(publicKeyPath);
        }
    }//GEN-LAST:event_jButtonDSAselectPublictKeyPathActionPerformed

    /**
     *
     * @param evt
     */
    private void jButtonDSAcomprobarFirmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDSAcomprobarFirmaActionPerformed

        clearErrorsDSA();
        if (jTextAreaDSApublicKeyPath.getText().isBlank()) {
            jPanelErrorMensaje("Selecciona una Public Key");
        } else {

            PublicKey publicKey = (PublicKey) DigitalSigningTool.loadClave(jTextAreaDSApublicKeyPath.getText(), false);

            if (publicKey == null) {
                jPanelErrorMensaje("Error al leer la clave publica");
            } else {
                String originalAbsolutePath = selectFile("Selecciona el archivo original para comprobar la firna", true, 2);
                String firmadoAbsolutePath = selectFile("Selecciona el archivo firmado para comprobar", true, 9);
                if (originalAbsolutePath == null || firmadoAbsolutePath == null || originalAbsolutePath.isBlank() || firmadoAbsolutePath.isBlank()) {
                    jPanelErrorMensaje("Comprueba las rutas de los ficheros");
                } else {

                    //Si la firma es correcta Muestra mensaje OK o ERROR
                    if (DigitalSigningTool.verificarFirma(originalAbsolutePath, firmadoAbsolutePath, publicKey)) {

                        JOptionPane jop = new JOptionPane("Firma del fichero correcta", JOptionPane.PLAIN_MESSAGE);
                        JDialog jd = jop.createDialog("FIRMA CORRECTA");
                        jd.setLocationRelativeTo(null);
                        jd.setVisible(true);

                    } else {

                        JOptionPane jop = new JOptionPane("El fichero del fichero incorrecta", JOptionPane.WARNING_MESSAGE);
                        JDialog jd = jop.createDialog("FIRMA INCORRECTA");
                        jd.setLocationRelativeTo(null);
                        jd.setVisible(true);
                    }

                }
            }
        }
    }//GEN-LAST:event_jButtonDSAcomprobarFirmaActionPerformed

    /**
     * Accion del Boton Abrir de la vista Digital SigningToll
     *
     * @param evt
     */
    private void jButtonDSAselectPublictKeyPath1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDSAselectPublictKeyPath1ActionPerformed

        clearErrorsDSA();
        if (jTextAreaDSAcifradoPath.getText().isBlank()) {
            jLabelDSAcifradoPath.setForeground(Color.red);
        } else {
            try {
                Path p = Paths.get(jTextAreaDSAcifradoPath.getText());
                Desktop.getDesktop().open(new File(p.getParent().toString()));
            } catch (IOException ex) {
                Logs.LOGGER_ERRORS.log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonDSAselectPublictKeyPath1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAESgeneratorCifrar;
    private javax.swing.JButton jButtonAESgeneratorDescifrar;
    private javax.swing.JButton jButtonAESgeneratorGenerar;
    private javax.swing.JButton jButtonAESgeneratorLimpiar;
    private javax.swing.JButton jButtonAESgeneratorLimpiar1;
    private javax.swing.JButton jButtonAESgeneratorOpenCifrado;
    private javax.swing.JButton jButtonAESgeneratorSaveKey;
    private javax.swing.JButton jButtonAESgeneratorSelectKeyPath;
    private javax.swing.JButton jButtonDSAGenerarPair;
    private javax.swing.JButton jButtonDSAcifrarPrivateKey;
    private javax.swing.JButton jButtonDSAcomprobarFirma;
    private javax.swing.JButton jButtonDSAsaveKeys;
    private javax.swing.JButton jButtonDSAselectPrivatetKeyPath;
    private javax.swing.JButton jButtonDSAselectPublictKeyPath;
    private javax.swing.JButton jButtonDSAselectPublictKeyPath1;
    private javax.swing.JButton jButtonHASHCifrarArchivo;
    private javax.swing.JButton jButtonHASHCifrarTexto;
    private javax.swing.JButton jButtonHASHLimpiar;
    private javax.swing.JButton jButtonHASHSelectFile;
    private javax.swing.JButton jButtonLogs;
    private javax.swing.JButton jButtonRSAcifradoCifrar;
    private javax.swing.JButton jButtonRSAcifradoDescifra;
    private javax.swing.JButton jButtonRSAcifradoLimpiar;
    private javax.swing.JButton jButtonRSAcifradoOpenCifrado;
    private javax.swing.JButton jButtonRSAcifradoSelectKeyPath;
    private javax.swing.JButton jButtonRSAgeneratorGenerarPair;
    private javax.swing.JButton jButtonRSAgeneratorLimpiar;
    private javax.swing.JButton jButtonRSAgeneratorSaveKeys;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox<String> jComboBoxAESgeneratorKeySize;
    private javax.swing.JComboBox<String> jComboBoxHASH;
    private javax.swing.JComboBox<String> jComboBoxRSAcifradoKeyTipe;
    private javax.swing.JComboBox<String> jComboBoxRSAgeneratorKeySize;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelAESgeneratorKey;
    private javax.swing.JLabel jLabelAESgeneratorKeySize;
    private javax.swing.JLabel jLabelAESgeneratorPass;
    private javax.swing.JLabel jLabelAESgeneratorPathCifrado;
    private javax.swing.JLabel jLabelAESgeneratorPathKey;
    private javax.swing.JLabel jLabelCafeConPalito;
    private javax.swing.JLabel jLabelDSAcifradoPath;
    private javax.swing.JLabel jLabelDSAprivateKey;
    private javax.swing.JLabel jLabelDSAprivateKeyPath;
    private javax.swing.JLabel jLabelDSApublicKey;
    private javax.swing.JLabel jLabelDSApublicKeyPath;
    private javax.swing.JLabel jLabelHASHFilePath;
    private javax.swing.JLabel jLabelHASHString;
    private javax.swing.JLabel jLabelLogs;
    private javax.swing.JLabel jLabelRSAcifradoKeyTipe;
    private javax.swing.JLabel jLabelRSAcifradoPathCifrado;
    private javax.swing.JLabel jLabelRSAcifradoPathKey;
    private javax.swing.JLabel jLabelRSAgeneratorKeySeed;
    private javax.swing.JLabel jLabelRSAgeneratorKeySize;
    private javax.swing.JLabel jLabelRSAgeneratorKeySize1;
    private javax.swing.JLabel jLabelRSAprivateKey;
    private javax.swing.JLabel jLabelRSApubliKey;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaAESgeneratorKey;
    private javax.swing.JTextArea jTextAreaDSAcifradoPath;
    private javax.swing.JTextArea jTextAreaDSAprivateKey;
    private javax.swing.JTextArea jTextAreaDSAprivateKeyPath;
    private javax.swing.JTextArea jTextAreaDSApublicKey;
    private javax.swing.JTextArea jTextAreaDSApublicKeyPath;
    private javax.swing.JTextArea jTextAreaHASHResponse;
    private javax.swing.JTextArea jTextAreaRSAgeneratorPrivateKey;
    private javax.swing.JTextArea jTextAreaRSAgeneratorPublicKey;
    private javax.swing.JTextField jTextFieldAESgeneratorPass;
    private javax.swing.JTextField jTextFieldAESgeneratorPathCifrado;
    private javax.swing.JTextField jTextFieldAESgeneratorPathKey;
    private javax.swing.JTextField jTextFieldHASHRutaArchivo;
    private javax.swing.JTextField jTextFieldRSAcifradoPathCifrado;
    private javax.swing.JTextField jTextFieldRSAcifradoPathKey;
    private javax.swing.JTextField jTextFieldRSAgeneratorKeySeed;
    private javax.swing.JTextArea jTextHASHAreaString;
    // End of variables declaration//GEN-END:variables
}
